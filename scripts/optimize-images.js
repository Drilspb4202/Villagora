const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  imageDir: path.join(__dirname, '../public/images'),
  // –ö–∞—á–µ—Å—Ç–≤–æ JPEG
  jpegQuality: 80,
  // –ö–∞—á–µ—Å—Ç–≤–æ WebP
  webpQuality: 75,
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  maxWidth: 1920,
  // –®–∏—Ä–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
  previewWidth: 300,
  // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  extensions: ['.jpg', '.jpeg', '.png'],
  // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
  skipSuffixes: ['-optimized', '-preview'],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function processDirectory(directory) {
  console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${directory}`);
  
  const items = fs.readdirSync(directory);
  
  for (const item of items) {
    const fullPath = path.join(directory, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      await processDirectory(fullPath);
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const ext = path.extname(fullPath).toLowerCase();
      if (config.extensions.includes(ext)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        if (!config.skipSuffixes.some(suffix => fullPath.includes(suffix))) {
          await optimizeImage(fullPath);
        }
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function optimizeImage(imagePath) {
  try {
    const parsedPath = path.parse(imagePath);
    const optimizedPath = path.join(
      parsedPath.dir, 
      `${parsedPath.name}-optimized${parsedPath.ext}`
    );
    const previewPath = path.join(
      parsedPath.dir, 
      `${parsedPath.name}-preview${parsedPath.ext}`
    );
    const webpPath = path.join(
      parsedPath.dir, 
      `${parsedPath.name}${parsedPath.ext === '.png' ? '-optimized' : ''}.webp`
    );
    
    console.log(`–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º: ${imagePath}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const metadata = await sharp(imagePath).metadata();
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await sharp(imagePath)
      .resize({
        width: Math.min(metadata.width, config.maxWidth),
        withoutEnlargement: true
      })
      .jpeg({ quality: config.jpegQuality, mozjpeg: true })
      .toFile(optimizedPath);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    await sharp(imagePath)
      .resize({
        width: config.previewWidth,
        withoutEnlargement: true
      })
      .jpeg({ quality: 60, mozjpeg: true })
      .toFile(previewPath);
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    await sharp(imagePath)
      .resize({
        width: Math.min(metadata.width, config.maxWidth),
        withoutEnlargement: true
      })
      .webp({ quality: config.webpQuality })
      .toFile(webpPath);
    
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${path.basename(imagePath)}`);
    console.log(`   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: ${path.basename(optimizedPath)}`);
    console.log(`   - –ü—Ä–µ–≤—å—é: ${path.basename(previewPath)}`);
    console.log(`   - WebP: ${path.basename(webpPath)}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${imagePath}:`, error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.imageDir}`);
  console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: JPEG ${config.jpegQuality}%, WebP ${config.webpQuality}%, –º–∞–∫—Å. —à–∏—Ä–∏–Ω–∞ ${config.maxWidth}px`);
  
  try {
    await processDirectory(config.imageDir);
    console.log('‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 